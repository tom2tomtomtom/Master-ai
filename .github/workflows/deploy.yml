name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quality Checks
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NEXTAUTH_SECRET: test-secret-for-build-only
          NEXTAUTH_URL: http://localhost:3000

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  # Deploy to Staging (Preview)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel (Preview)
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          
      - name: Comment Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Preview deployed!**\n\nüîó **Preview URL:** ${{ steps.deploy.outputs.preview_url }}\n\n‚è∞ **Deployed at:** ' + new Date().toISOString()
            })

  # Database Migration Check
  check-migrations:
    name: Check Database Migrations
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Check migration status
        run: |
          echo "Checking if migrations are needed..."
          # This would ideally connect to a staging database to verify migrations
          npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit, check-migrations]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel (Production)
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT
          
      - name: Run Post-Deploy Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.production_url }}/api/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi
          
      - name: Notify Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.production_url }}',
              description: 'Successfully deployed to production',
              context: 'deployment/production'
            })

  # Post-Deploy Database Migration
  migrate-production:
    name: Migrate Production Database
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Database Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Seed Initial Data (if needed)
        run: |
          # Only run seeding if this is the first deployment or if explicitly needed
          if [ "${{ github.event.head_commit.message }}" = *"[seed]"* ]; then
            echo "Running database seeding..."
            npm run seed-achievements
          else
            echo "Skipping seeding (not requested)"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

# Workflow for monitoring and rollback
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for System Stabilization
        run: sleep 60
        
      - name: Run Extended Health Checks
        run: |
          echo "Running extended health checks..."
          
          # Check main application
          curl -f ${{ needs.deploy-production.outputs.production_url }}/api/health || exit 1
          
          # Check authentication endpoint
          curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-production.outputs.production_url }}/api/auth/session | grep -q "200" || exit 1
          
          # Check database connectivity
          curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-production.outputs.production_url }}/api/dashboard/stats | grep -q "200\|401" || exit 1
          
          echo "‚úÖ All health checks passed"
          
      - name: Create Deployment Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "deploy-$(date +'%Y%m%d-%H%M%S')" -m "Production deployment $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin --tags